{"version":3,"sources":["Components/Participant.jsx","Components/Participants.jsx","Components/LastUpdated.jsx","App.jsx","serviceWorker.js","index.js"],"names":["Participant","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","display","_this2","react_default","a","createElement","className","onClick","window","open","concat","name","split","toLowerCase","calculateScore","prediction","setState","key","keys","sort","map","character","src","alt","results","Component","Participants","predictions","participant","Components_Participant","scores","LastUpdated","lastUpdated","App","score","axios","get","then","response","data","catch","error","console","log","id","Components_LastUpdated","Components_Participants","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"sRA4KeA,cAzKb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,SAAS,GAHMR,wEAMV,IAAAS,EAAAN,KACP,OACEO,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACbH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,OACdH,EAAAC,EAAAC,cAAA,KACEE,QAAS,WACPC,OAAOC,KAAP,QAAAC,OACUR,EAAKV,MAAMmB,KAAKC,MAAM,KAAK,GAAGC,cADxC,UAIFP,UAAU,qBAGdH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,QAAQV,KAAKJ,MAAMmB,MACnCR,EAAAC,EAAAC,cAAA,QAAMC,UAAU,SAAhB,UACU,IACPV,KAAKJ,MAAMsB,eAAelB,KAAKJ,MAAMmB,KAAMf,KAAKJ,MAAMuB,YAFzD,IAEuE,KAEvEZ,EAAAC,EAAAC,cAAA,QAAMC,UAAU,UACZV,KAAKI,MAAMC,QAQX,GAPAE,EAAAC,EAAAC,cAAA,KACEE,QAAS,WACPL,EAAKc,SAAS,CAAEf,SAAS,KAE3BK,UAAU,6BAKbV,KAAKI,MAAMC,QACVE,EAAAC,EAAAC,cAAA,KACEE,QAAS,WACPL,EAAKc,SAAS,CAAEf,SAAS,KAE3BK,UAAU,2BAGZ,IAIHV,KAAKI,MAAMC,QACVE,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,MAAIY,IAAKrB,KAAKJ,MAAMmB,KAAO,WACzBR,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAA,mBACAF,EAAAC,EAAAC,cAAA,kBACAF,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAA,oBACAF,EAAAC,EAAAC,cAAA,qBAEDX,OAAOwB,KAAKtB,KAAKJ,MAAMuB,YACrBI,OACAC,IAAI,SAAAC,GACH,OACElB,EAAAC,EAAAC,cAAA,MACEY,IACEf,EAAKV,MAAMmB,KACX,IACAU,EAAUT,MAAM,KAAK,GACrBS,EAAUT,MAAM,KAAK,IAGvBT,EAAAC,EAAAC,cAAA,UAAKgB,GACLlB,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,OACEC,UAAU,cACVgB,IACuC,MAArCpB,EAAKV,MAAMuB,WAAWM,GAClB,qBACA,GAENE,IAAI,KAENpB,EAAAC,EAAAC,cAAA,SACwC,MAArCH,EAAKV,MAAMuB,WAAWM,GACnB,QACA,KAGRlB,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,OACEC,UAAU,cACVgB,IACuC,MAArCpB,EAAKV,MAAMuB,WAAWM,GAElB,oBACA,GAENE,IAAI,KAENpB,EAAAC,EAAAC,cAAA,SACwC,MAArCH,EAAKV,MAAMuB,WAAWM,GAEnB,OACA,KAGRlB,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,OACEC,UAAU,cACVgB,IACuC,MAArCpB,EAAKV,MAAMuB,WAAWM,GAClB,4BACA,GAENE,IAAI,KAENpB,EAAAC,EAAAC,cAAA,SACwC,MAArCH,EAAKV,MAAMuB,WAAWM,GACnB,eACA,KAGRlB,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,OACEC,UAAU,cACVgB,IACoC,MAAlCpB,EAAKV,MAAMgC,QAAQH,GACf,qBACkC,MAAlCnB,EAAKV,MAAMgC,QAAQH,GACnB,oBACkC,MAAlCnB,EAAKV,MAAMgC,QAAQH,GACnB,4BACA,GAENE,IAAI,KAENpB,EAAAC,EAAAC,cAAA,SACqC,MAAlCH,EAAKV,MAAMgC,QAAQH,GAChB,QACkC,MAAlCnB,EAAKV,MAAMgC,QAAQH,GACnB,OACkC,MAAlCnB,EAAKV,MAAMgC,QAAQH,GACnB,eACA,KAGRlB,EAAAC,EAAAC,cAAA,UACGH,EAAKV,MAAMgC,QAAQH,KACpBnB,EAAKV,MAAMuB,WAAWM,GACgB,MAAlCnB,EAAKV,MAAMgC,QAAQH,IACe,MAAlCnB,EAAKV,MAAMgC,QAAQH,GACjB,IACkC,MAAlCnB,EAAKV,MAAMgC,QAAQH,GACnB,IACA,GACF,UAQlB,WAnKgBI,aCuBXC,mLAtBJ,IAAAjC,EAAAG,KACP,OACEO,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACZZ,OAAOwB,KAAKtB,KAAKJ,MAAMmC,aACrBR,OACAC,IAAI,SAAAQ,GACH,OACEzB,EAAAC,EAAAC,cAACwB,EAAD,CACEZ,IAAKW,EACLb,WAAYtB,EAAKD,MAAMmC,YAAYC,GAAab,WAChDJ,KAAMiB,EACNJ,QAAS/B,EAAKD,MAAMgC,QACpBM,OAAQrC,EAAKD,MAAMsC,OACnBhB,eAAgBrB,EAAKD,MAAMsB,2BAdhBW,aCUZM,mLARX,OACE5B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eAAf,oBACoBV,KAAKJ,MAAMwC,oBAJXP,aCmGXQ,cA5Fb,SAAAA,EAAYzC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAqC,IACjBxC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAuC,GAAAlC,KAAAH,KAAMJ,KAwDRsB,eAAiB,SAACH,EAAMI,GACtB,IAAIe,EAASrC,EAAKO,MAAM8B,OACpBI,EAAQ,EA6BZ,OA5BAxC,OAAOwB,KAAKH,GAAYK,IAAI,SAAAC,GAyB1B,OAvBEN,EAAWM,KAAe5B,EAAKO,MAAMwB,QAAQH,IACnB,MAA1BN,EAAWM,KAEXa,GAAS,GAGTnB,EAAWM,KAAe5B,EAAKO,MAAMwB,QAAQH,IACnB,MAA1BN,EAAWM,KAEXa,GAAS,GAGiB,MAA1BnB,EAAWM,IACuB,MAAlC5B,EAAKO,MAAMwB,QAAQH,KAEnBa,GAAS,GAGTnB,EAAWM,KAAe5B,EAAKO,MAAMwB,QAAQH,IACnB,MAA1BN,EAAWM,KAEXa,GAAS,GAEJ,IAETJ,EAAOnB,GAAQuB,EACRA,GAtFPzC,EAAKO,MAAQ,CACXgC,YAAa,sBACbL,YAAa,GACbH,QAAS,GACTM,OAAQ,IANOrC,oFASE,IAAAS,EAAAN,KACnBuC,IACGC,IAAI,uBACJC,KAAK,SAAAC,GACJ,IAAIR,EAAS5B,EAAKF,MAAM8B,OACxB5B,EAAKc,SAAS,CAAEW,YAAaW,EAASC,OACtC7C,OAAOwB,KAAKoB,EAASC,MAAMnB,IAAI,SAAAQ,GAG7B,OAFAE,EAAOF,GAAe,EACtB1B,EAAKc,SAAS,CAAEc,WACT,MAGVU,MAAM,SAAAC,GACLC,QAAQC,IAAIF,KAEhBN,IACGC,IAAI,sBACJC,KAAK,SAAAC,GACJpC,EAAKc,SAAS,CAAEgB,YAAaM,EAASC,KAAK,oBAE5CC,MAAM,SAAAC,GACLC,QAAQC,IAAIF,KAEhBN,IACGC,IAAI,kBACJC,KAAK,SAAAC,GACJpC,EAAKc,SAAS,CAAEQ,QAASc,EAASC,SAEnCC,MAAM,SAAAC,GACLC,QAAQC,IAAIF,sCAKhB,OACEtC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKuC,GAAG,OAAOtB,IAAI,oCAAoCC,IAAI,KAC3DpB,EAAAC,EAAAC,cAACwC,EAAD,CAAab,YAAapC,KAAKI,MAAMgC,cACrC7B,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACyC,EAAD,CACEnB,YAAa/B,KAAKI,MAAM2B,YACxBH,QAAS5B,KAAKI,MAAMwB,QACpBM,OAAQlC,KAAKI,MAAM8B,OACnBhB,eAAgBlB,KAAKkB,yBArDbW,aCIEsB,QACW,cAA7BvC,OAAOwC,SAASC,UAEe,UAA7BzC,OAAOwC,SAASC,UAEhBzC,OAAOwC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOjD,EAAAC,EAAAC,cAACgD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrB,KAAK,SAAAsB,GACjCA,EAAaC","file":"static/js/main.6f870619.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nclass Participant extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      display: false\r\n    };\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"Participant\">\r\n        <span className=\"pdf\">\r\n          <i\r\n            onClick={() => {\r\n              window.open(\r\n                `/pdf/${this.props.name.split(\" \")[0].toLowerCase()}.pdf`\r\n              );\r\n            }}\r\n            className=\"far fa-file-pdf\"\r\n          />\r\n        </span>\r\n        <span className=\"name\">{this.props.name}</span>\r\n        <span className=\"score\">\r\n          (Score:{\" \"}\r\n          {this.props.calculateScore(this.props.name, this.props.prediction)}){\" \"}\r\n        </span>\r\n        <span className=\"expand\">\r\n          {!this.state.display ? (\r\n            <i\r\n              onClick={() => {\r\n                this.setState({ display: true });\r\n              }}\r\n              className=\"fas fa-angle-double-down\"\r\n            />\r\n          ) : (\r\n            \"\"\r\n          )}\r\n          {this.state.display ? (\r\n            <i\r\n              onClick={() => {\r\n                this.setState({ display: false });\r\n              }}\r\n              className=\"fas fa-angle-double-up\"\r\n            />\r\n          ) : (\r\n            \"\"\r\n          )}\r\n        </span>\r\n\r\n        {this.state.display ? (\r\n          <table>\r\n            <tbody>\r\n              <tr key={this.props.name + \"_header\"}>\r\n                <th>Character</th>\r\n                <th>Alive</th>\r\n                <th>Dead</th>\r\n                <th>White Walker</th>\r\n                <th>Result</th>\r\n                <th>Points</th>\r\n              </tr>\r\n              {Object.keys(this.props.prediction)\r\n                .sort()\r\n                .map(character => {\r\n                  return (\r\n                    <tr\r\n                      key={\r\n                        this.props.name +\r\n                        \"_\" +\r\n                        character.split(\" \")[0] +\r\n                        character.split(\" \")[1]\r\n                      }\r\n                    >\r\n                      <td>{character}</td>\r\n                      <td>\r\n                        <img\r\n                          className=\"statusImage\"\r\n                          src={\r\n                            this.props.prediction[character] === \"A\"\r\n                              ? \"./images/alive.jpg\"\r\n                              : \"\"\r\n                          }\r\n                          alt=\"\"\r\n                        />\r\n                        <p>\r\n                          {this.props.prediction[character] === \"A\"\r\n                            ? \"Alive\"\r\n                            : \"\"}\r\n                        </p>\r\n                      </td>\r\n                      <td>\r\n                        <img\r\n                          className=\"statusImage\"\r\n                          src={\r\n                            this.props.prediction[character] === \"D\"\r\n                              ? // || this.props.prediction[character] === \"W\"\r\n                                \"./images/dead.jpg\"\r\n                              : \"\"\r\n                          }\r\n                          alt=\"\"\r\n                        />\r\n                        <p>\r\n                          {this.props.prediction[character] === \"D\"\r\n                            ? // || This.props.prediction[character] === \"W\"\r\n                              \"Dead\"\r\n                            : \"\"}\r\n                        </p>\r\n                      </td>\r\n                      <td>\r\n                        <img\r\n                          className=\"statusImage\"\r\n                          src={\r\n                            this.props.prediction[character] === \"W\"\r\n                              ? \"./images/white_walker.gif\"\r\n                              : \"\"\r\n                          }\r\n                          alt=\"\"\r\n                        />\r\n                        <p>\r\n                          {this.props.prediction[character] === \"W\"\r\n                            ? \"White Walker\"\r\n                            : \"\"}\r\n                        </p>\r\n                      </td>\r\n                      <td>\r\n                        <img\r\n                          className=\"statusImage\"\r\n                          src={\r\n                            this.props.results[character] === \"A\"\r\n                              ? \"./images/alive.jpg\"\r\n                              : this.props.results[character] === \"D\"\r\n                              ? \"./images/dead.jpg\"\r\n                              : this.props.results[character] === \"W\"\r\n                              ? \"./images/white_walker.gif\"\r\n                              : \"\"\r\n                          }\r\n                          alt=\"\"\r\n                        />\r\n                        <p>\r\n                          {this.props.results[character] === \"A\"\r\n                            ? \"Alive\"\r\n                            : this.props.results[character] === \"D\"\r\n                            ? \"Dead\"\r\n                            : this.props.results[character] === \"W\"\r\n                            ? \"White Walker\"\r\n                            : \"\"}\r\n                        </p>\r\n                      </td>\r\n                      <td>\r\n                        {this.props.results[character] ===\r\n                        this.props.prediction[character]\r\n                          ? this.props.results[character] === \"A\" ||\r\n                            this.props.results[character] === \"D\"\r\n                            ? \"1\"\r\n                            : this.props.results[character] === \"W\"\r\n                            ? \"2\"\r\n                            : \"\"\r\n                          : \"0\"}\r\n                      </td>\r\n                    </tr>\r\n                  );\r\n                })}\r\n            </tbody>\r\n          </table>\r\n        ) : (\r\n          \"\"\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Participant;\r\n","import React, { Component } from \"react\";\r\nimport Participant from \"./Participant\";\r\nclass Participants extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"Participants\">\r\n        {Object.keys(this.props.predictions)\r\n          .sort()\r\n          .map(participant => {\r\n            return (\r\n              <Participant\r\n                key={participant}\r\n                prediction={this.props.predictions[participant].prediction}\r\n                name={participant}\r\n                results={this.props.results}\r\n                scores={this.props.scores}\r\n                calculateScore={this.props.calculateScore}\r\n              />\r\n            );\r\n          })}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Participants;\r\n","import React, { Component } from \"react\";\r\n\r\nclass LastUpdated extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"LastUpdated\">\r\n        Last Updated on: {this.props.lastUpdated}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default LastUpdated;\r\n","import React, { Component } from \"react\";\r\n\r\nimport \"./App.css\";\r\nimport axios from \"axios\";\r\n\r\nimport Participants from \"./Components/Participants\";\r\nimport LastUpdated from \"./Components/LastUpdated\";\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      lastUpdated: \"April 11 : 18:50 pm\",\r\n      predictions: {},\r\n      results: {},\r\n      scores: {}\r\n    };\r\n  }\r\n  componentWillMount() {\r\n    axios\r\n      .get(\"./participants.json\")\r\n      .then(response => {\r\n        let scores = this.state.scores;\r\n        this.setState({ predictions: response.data });\r\n        Object.keys(response.data).map(participant => {\r\n          scores[participant] = 0;\r\n          this.setState({ scores });\r\n          return 0;\r\n        });\r\n      })\r\n      .catch(error => {\r\n        console.log(error);\r\n      });\r\n    axios\r\n      .get(\"./lastUpdated.json\")\r\n      .then(response => {\r\n        this.setState({ lastUpdated: response.data[\"Last Updated\"] });\r\n      })\r\n      .catch(error => {\r\n        console.log(error);\r\n      });\r\n    axios\r\n      .get(\"./results.json\")\r\n      .then(response => {\r\n        this.setState({ results: response.data });\r\n      })\r\n      .catch(error => {\r\n        console.log(error);\r\n      });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <img id=\"logo\" src=\"./images/game-of-thrones-logo.jpg\" alt=\"\" />\r\n        <LastUpdated lastUpdated={this.state.lastUpdated} />\r\n        <br />\r\n        <Participants\r\n          predictions={this.state.predictions}\r\n          results={this.state.results}\r\n          scores={this.state.scores}\r\n          calculateScore={this.calculateScore}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n  calculateScore = (name, prediction) => {\r\n    let scores = this.state.scores;\r\n    let score = 0;\r\n    Object.keys(prediction).map(character => {\r\n      if (\r\n        prediction[character] === this.state.results[character] &&\r\n        prediction[character] === \"A\"\r\n      ) {\r\n        score += 1;\r\n      }\r\n      if (\r\n        prediction[character] === this.state.results[character] &&\r\n        prediction[character] === \"D\"\r\n      ) {\r\n        score += 1;\r\n      }\r\n      if (\r\n        prediction[character] === \"D\" &&\r\n        this.state.results[character] === \"W\"\r\n      ) {\r\n        score += 1;\r\n      }\r\n      if (\r\n        prediction[character] === this.state.results[character] &&\r\n        prediction[character] === \"W\"\r\n      ) {\r\n        score += 2;\r\n      }\r\n      return 0;\r\n    });\r\n    scores[name] = score;\r\n    return score;\r\n  };\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App.jsx\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}